---
output:
  rmarkdown::html_document:
    theme: cerulean
    code_download: true
---
# Part 1: SQL Set-up and Logistics
Before we can start playing with data, we're going to make sure we have set up and configured MySQL on our machine. We'll do this part live, so follow along. We can interact with MySQL in a few ways:

* MySQL Workbench: A Graphical User Interface for your SQL data
* The command line

The nice thing about the workbench is that it can help you learn how to write and parse SQL queries, since it will translate your request into the query. So we'll mostly be using the Workbench to check that our work is being stored correctly, but I will show some quick examples in the command line too later on in the tutorial. 

Once we have set up MySQL on our machine, making note of the MySQL user (and their credentials to write new tables etc.), we can start working in R to import our data, write it to SQL, and be off to the races. 

_A note on how I'm using SQL here:_ One of the core features of an SQL database is that you can link different scheme (think tables) together with keys. Keys can be used to create a relationship among different database tables or views. This isn't a tutorial on SQL, so we're keeping it simple today. But if SQL is something you want to learn, this is a pretty fundamental concept to keep in mind.

## Diving into R

What you're looking at right now is an HTML version of an RMarkdown file that I prepared for this tutorial. A markdown document allows me to combine text, code blocks, and outputs of those codes in one place. If you download the 'Rmd' file from the website, you can see what the Markdown document looks like in its raw form. When you're done editing, you can see the formatted html version by "Knitting".

### (_An Aside_) Jupyter Notebooks

A very popular alternative to R Markdown documents is Jupyter Notebooks. If Python is your thing, you'll probably prefer them. You can also add in R to Jupyter notebooks and even toggle between R code blocks and Python code blocks in one place. Let's take a quick peek at the Jupyter notebooks ecosystem so you can make a mental note to learn more another day.


### R Set-up: Libraries and Packages
In this first code block, we're going to (1) check for the necessary packages to execute the codes in this Markdown document, (2) install those packages if you haven't already installed them, and (3) load the packages if installed.

I like the 'pacman' package to streamline this process, since you can just give it a list of packages within the 'p_load' command that will elegantly install any missing packages and then load them.

```{r setup, include=TRUE}

# Check for pacman and load
if (!require("pacman")) install.packages("pacman"); library(pacman)

# Install / load required packages
p_load(DBI,RODBC,odbc,dbplyr,RMySQL,tidyverse,keyring,con2aqi,lubridate, stringr)
```

### R Set-up: SQL Connection

The packages we have loaded (specifically: DBI, RODBC, ODBC and dbplyr) will let us connect to and manipulate an SQL database. Let's first check to make sure we have the appropriate drivers installed to run these packages successfully, and then connect to our SQL database.

(note, if you don't have an empty database to work with, we can create one in either the MySQL workbench or in the command line)

> mysql -u root -p

> CREATE DATABASE livedemo;

You'll notice in the code block below that I haven't actually shown you my MySQL password - this is good coding practice. It's not a good idea to be widely sharing passwords, API keys etc. The best approach here is to store your password as an environment variable. I like the 'keyring' package to do this for me. I have previously stored my password and so I can just use the key_get function to load it. Hooray!

```{r SQL-connect, include=TRUE}

# First check that the MySQL driver is listed here before proceeding.
sort(unique(odbcListDrivers()[[1]]))

# Now connect to our SQL database using the 'dbConnect' function:

sql_conn <- dbConnect(RMySQL::MySQL(),
                  dbname = "aaar2023tutorial",
                  Server = "localhost",
                  port = 3306,
                  user = "root",
                  password = key_get("MYSQL_PASSWORD")
                  )
```